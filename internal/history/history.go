package history

import (
	"errors"
	"log"
	"os"
	"path/filepath"

	"github.com/BurntSushi/toml"
	"github.com/ByteBakersCo/babilema/internal/config"
)

const (
	historyFileName string = ".babilema-history.toml"
	warningComment  string = "# This file is auto-generated by Babilema. Do not edit manually.\n\n"
)

type History struct {
	Data map[string]string `toml:"history"`
}

func ParseHistoryFile(cfg config.Config) (map[string]string, error) {
	history := History{}
	_, err := toml.DecodeFile(
		filepath.Join(cfg.OutputDir, historyFileName),
		&history,
	)
	if err != nil {
		if errors.Is(err, os.ErrNotExist) {
			log.Println("History file not found.")
			return nil, nil
		}

		return nil, err
	}

	log.Println("History file parsed.")

	return history.Data, nil
}

func UpdateHistoryFile(history map[string]string, cfg config.Config) error {
	var file *os.File

	file, err := os.OpenFile(
		filepath.Join(cfg.OutputDir, historyFileName),
		os.O_CREATE|os.O_TRUNC|os.O_WRONLY,
		0644,
	)
	if err != nil {
		return err
	}
	defer file.Close()

	_, err = file.WriteString(warningComment)
	if err != nil {
		return err
	}

	encoder := toml.NewEncoder(file)
	err = encoder.Encode(History{Data: history})
	if err != nil {
		return err
	}

	log.Println("History file updated.")

	return nil
}
