package history

import (
	"errors"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"time"

	"github.com/BurntSushi/toml"

	"github.com/ByteBakersCo/babilema/internal/config"
)

const (
	historyFileName string = ".babilema-history.toml"
	warningComment  string = "# This file is auto-generated by Babilema. Do not edit manually.\n\n"
)

type History struct {
	Data map[string]time.Time `toml:"history"`
}

func ParseHistoryFile(cfg config.Config) (map[string]time.Time, error) {
	if cfg.OutputDir == "" {
		return nil, errors.New("output dir not set")
	}

	history := History{
		Data: make(map[string]time.Time),
	}
	_, err := toml.DecodeFile(
		filepath.Join(cfg.OutputDir, historyFileName),
		&history,
	)

	if err != nil && !errors.Is(err, os.ErrNotExist) {
		return nil, err
	}

	if errors.Is(err, os.ErrNotExist) {
		log.Println(
			"History file not found, a new one will be created on update.",
		)
	} else {
		log.Println("History file parsed.")
	}

	return history.Data, nil
}

func UpdateHistoryFile(history map[string]time.Time, cfg config.Config) error {
	if cfg.TempDir == "" {
		return errors.New("temp dir not set")
	}

	file, err := os.OpenFile(
		filepath.Join(cfg.TempDir, historyFileName),
		os.O_CREATE|os.O_TRUNC|os.O_WRONLY,
		0644,
	)
	if err != nil {
		return fmt.Errorf(
			"UpdateHistoryFile(): %w",
			err,
		)
	}
	defer file.Close()

	_, err = file.WriteString(warningComment)
	if err != nil {
		return fmt.Errorf(
			"UpdateHistoryFile(): %w",
			err,
		)
	}

	encoder := toml.NewEncoder(file)
	err = encoder.Encode(History{Data: history})
	if err != nil {
		return fmt.Errorf(
			"UpdateHistoryFile(): cannot encode history data to TOML: %w",
			err,
		)
	}

	log.Println("History file updated.")

	return nil
}
